# Risk Profile Calculator API

This project comprises in a demonstration of a risk profile calculator.
The features can be called through a API.
The solution is made up Python 3, Flask, Flask-RestX, Flask-SQLAlchemy, PyTest, Swagger and Docker.
In order to provide a decoupled an extensible code, the business rules were developed using the Rule Pattern.

## Build without Docker
Make sure that you have Python 3 installed on your machine.
Use the package manager [pip](https://pip.pypa.io/en/stable/) to install all dependencies listed in the requirements.txt file located in the root directory of this project.
```bash
# installing dependencies
pip install flask
pip install flask-restx
pip install Flask-SQLAlchemy
pip install pytest
```

## Build with Docker
By using docker you can increase the productivity and avoid environment issues related to dependencies.
Make sure that you have docker and docker-compose correctly installed on your machine.
The installation files can be found through this [link](https://www.docker.com/products/docker-desktop).
Once installed, you need to build and start the docker image.

```bash
# building and starting the docker image
docker-compose up -d --build

# you can check if it's running through the command
docker ps
```


## Endpoints
The API uses Swagger to provide a better experience when it comes to documentation and tests.
The default port is 5004.

RiskProfileCalculator

[/api/1/RiskProfileCalculator/risk-profile/](http://localhost:5004/api/1/RiskProfileCalculator/risk-profile/)


## Test
Once the project is running, you can test manually through the [link](http://localhost:5004/api/1)
There are many unit tests developed to check if every business rule is working as expected.
The unit tests can be started by using the command-line:

```bash
docker-compose exec api python -m pytest "src/tests"

# Input (example)
{
  "age": 35,
  "dependents": 2,
  "house": {"ownership_status": "owned"},
  "income": 0,
  "marital_status": "married",
  "risk_questions": [0, 1, 0],
  "vehicle": {"year": 2018}
}

# Output (example)

{
    "auto": "regular",
    "disability": "ineligible",
    "home": "economic",
    "life": "regular"
}
```